# Copyright 2015 - 2016 Square Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package parser

import "github.com/square/metrics/query/command"

type Parser Peg {
  // temporary variables
  // ===================

  // stack of nodes used during the AST traversal.
  // a non-empty stack at the finish implies a programming error.
  nodeStack  []any

  // user errors accumulated during the AST traversal.
  // a non-empty list at the finish time means an invalid query is provided.
  errors     []SyntaxError

  // errorContext describes contexts used to build error messages
  fixedContext string
  errorContext []string

  // programming errors accumulated during the AST traversal.
  // a non-empty list at the finish time implies a programming error.

  // final result
  command    command.Command
}

# The following queries are support

# describe all [match x]  <- describe all statement - returns all metric keys.
# describe metric where ... <- describes a single metric - returns all tagsets within a single metric key.
# select ...                <- select statement - retrieves, transforms, and aggregates time serieses.

# Refer to the unit test query_test.go for more info.

# Hierarchical Syntax
# ===================

root <- (selectStmt / describeStmt) _ !.

selectStmt <- _ ("select" KEY)?
  expressionList
  &{ p.setContext("after expression of select statement") }
  optionalPredicateClause
  &{ p.setContext("") }
  propertyClause { p.makeSelect() }

describeStmt <- _ "describe" KEY (describeAllStmt / describeMetrics / describeSingleStmt)

describeAllStmt <- _ "all" KEY optionalMatchClause { p.makeDescribeAll() } &(_ !. / _ &{p.errorHere(position, `expected end of input after 'describe all' and optional match clause but got %q`, p.after(position) )})

optionalMatchClause <- matchClause / { p.addNullMatchClause() }

matchClause <-
  _ "match" KEY
  (literalString / &{ p.errorHere(position, `expected string literal to follow keyword "match"`) })
  { p.addMatchClause() }

describeMetrics <-
  _ "metrics" KEY
  (_ "where" KEY / &{ p.errorHere(position, `expected "where" to follow keyword "metrics" in "describe metrics" command`) })
  (tagName / &{ p.errorHere(position, `expected tag key to follow keyword "where" in "describe metrics" command`) })
  (_ "=" / &{ p.errorHere(position, `expected "=" to follow keyword "where" in "describe metrics" command`) })
  (literalString / &{ p.errorHere(position, `expected string literal to follow "=" in "describe metrics" command`) })
  { p.makeDescribeMetrics() }

describeSingleStmt <-
  (_ <METRIC_NAME> { p.pushString(unescapeLiteral(text)) } / &{ p.errorHere(position, `expected metric name to follow "describe" in "describe" command`) })
  optionalPredicateClause
  { p.makeDescribe() }

propertyClause <-
  { p.addEvaluationContext() }
  (
    _ PROPERTY_KEY { p.addPropertyKey(text) }
    (
      _ PROPERTY_VALUE {
      p.addPropertyValue(text) }
      /
      &{ p.errorHere(position, `expected value to follow key '%s'`, p.contents(tree, tokenIndex-2)) }
    )
    { p.insertPropertyKeyValue() }
    /
    _ "where" KEY &{ p.errorHere(position, `encountered "where" after property clause; "where" blocks must go BEFORE 'from' and 'to' specifiers`) }
    /
    _ (!(!.)) &{ p.errorHere(position, `expected key (one of 'from', 'to', 'resolution', or 'sample by') or end of input but got %q following a completed expression`, p.after(position)) }
  )*
  { p.checkPropertyClause() }

optionalPredicateClause <-
  predicateClause / { p.addNullPredicate() }

# expression_X are layered to maintain the order of operations.

expressionList <-
  { p.addExpressionList() }
  expression_start
  { p.appendExpression() }
  (
    _ COMMA
    (expression_start / &{ p.errorHere(position, `expected expression to follow ","`) })
    { p.appendExpression() }
  )*

expression_start <-
  expression_sum add_pipe

expression_sum <-
  expression_product
  (
    add_pipe
    (
      _ OP_ADD { p.addOperatorLiteral("+") } / _ OP_SUB { p.addOperatorLiteral("-") }
    )
    (expression_product / &{ p.errorHere(position, `expected expression to follow operator "+" or "-"`) })
    { p.addOperatorFunction() }
  ) *

expression_product <-
  expression_atom
  (
    add_pipe
    (
      _ OP_DIV { p.addOperatorLiteral("/") } / _ OP_MULT { p.addOperatorLiteral("*") }
    )
    (expression_atom / &{ p.errorHere(position, `expected expression to follow operator "*" or "/"`) })
    { p.addOperatorFunction() }
  ) *

add_one_pipe <-
  _ OP_PIPE
  (_ <IDENTIFIER> / &{ p.errorHere(position, `expected function name to follow pipe "|"`) })
  { p.pushString(unescapeLiteral(text)) }
  (
    (
      _ PAREN_OPEN
      (expressionList / {p.addExpressionList()}) # argument list
      optionalGroupBy
      (_ PAREN_CLOSE / &{ p.errorHere(position, `expected ")" to close "(" opened in pipe function call`) })
    ) / {
      p.addExpressionList()
      p.addGroupBy()
    }
  )
  { p.addPipeExpression() }
  expression_annotation

add_pipe <- (add_one_pipe)*

expression_atom <- expression_atom_raw expression_annotation

expression_atom_raw <-
  expression_function /
  expression_metric /
  # #sub-expression
  (
    _ PAREN_OPEN
    (expression_start / &{ p.errorHere(position, `expected expression to follow "("`) })
    (_ PAREN_CLOSE / &{ p.errorHere(position, `expected ")" to close "("`) })
  ) /
  # constant scalar
  _ <DURATION> { p.addDurationNode(text) } /
  _ <NUMBER> { p.addNumberNode(text) } /
  _ STRING { p.addStringNode(unescapeLiteral(text)) }

expression_annotation_required <-
  _ "{"
  <[^}]*>
  ("}" / &{ p.errorHere(position, `expected "$CLOSEBRACE$" to close "$OPENBRACE$" opened for annotation`) }) # peg generator doesn't handle `{` or `}` in comments or strings
  { p.addAnnotationExpression(text) }

expression_annotation <- expression_annotation_required?

optionalGroupBy <- (groupByClause / collapseByClause / { p.addGroupBy() })?

expression_function  <-
  # We allow syntax of the form:
  # func(expr_a, expr_b, expr_c group by column_a, column_b, column_c)
  # a single optional group-by clause.
  _ <IDENTIFIER>
  { p.pushString(unescapeLiteral(text)) }
  _ PAREN_OPEN
  (expressionList / &{ p.errorHere(position, `expected expression list to follow "(" in function call`) })
  optionalGroupBy
  (_ PAREN_CLOSE / &{ p.errorHere(position, `expected ")" to close "(" opened by function call`) })
  { p.addFunctionInvocation() }

expression_metric <-
  _ <IDENTIFIER>
  { p.pushString(unescapeLiteral(text)) }
  (
    _ "["
    (predicate_1 / &{ p.errorHere(position, `expected predicate to follow "[" after metric`) })
    (_ "]" / &{ p.errorHere(position, `expected "]" to close "[" opened to apply predicate`) })
    /
    { p.addNullPredicate() }
  )
  { p.addMetricExpression() }

groupByClause <-
  _ "group" KEY
  (_ "by" KEY / &{ p.errorHere(position, `expected keyword "by" to follow keyword "group" in "group by" clause`) })
  (_ <COLUMN_NAME> / &{ p.errorHere(position, `expected tag key identifier to follow "group by" keywords in "group by" clause`) })
  { p.addGroupBy() }
  { p.appendGroupTag(unescapeLiteral(text)) }
  (
    _ COMMA
    (_ <COLUMN_NAME> / &{ p.errorHere(position, `expected tag key identifier to follow "," in "group by" clause`) })
    { p.appendGroupTag(unescapeLiteral(text)) }
  )*

collapseByClause <-
  _ "collapse" KEY
  (_ "by" KEY / &{ p.errorHere(position, `expected keyword "by" to follow keyword "collapse" in "collapse by" clause`) })
  (_ <COLUMN_NAME> / &{ p.errorHere(position, `expected tag key identifier to follow "collapse by" keywords in "collapse by" clause`) })
  { p.addCollapseBy() }
  { p.appendGroupTag(unescapeLiteral(text)) }
  (
    _ COMMA
    (_ <COLUMN_NAME> / &{ p.errorHere(position, `expected tag key identifier to follow "," in "collapse by" clause`) })
    { p.appendGroupTag(unescapeLiteral(text)) }
  )*

predicateClause <-
  _ "where" KEY
  (_ predicate_1 / &{ p.errorHere(position, `expected predicate to follow "where" keyword`) })

# predicate_X are layered to maintain the order of operations.
# not
# or
# and
# ...

predicate_1 <-
  predicate_2
  _ OP_OR
  (predicate_1 / &{ p.errorHere(position, `expected predicate to follow "or" operator`) })
  { p.addOrPredicate() }
  /
  predicate_2

predicate_2 <-
  predicate_3
  _ OP_AND
  (predicate_2 / &{ p.errorHere(position, `expected predicate to follow "and" operator`) })
  { p.addAndPredicate() }
  /
  predicate_3

predicate_3 <-
  _ OP_NOT
  (predicate_3 / &{ p.errorHere(position, `expected predicate to follow "not" operator`) })
  { p.addNotPredicate() }
  /
  _ PAREN_OPEN
  (predicate_1 / &{ p.errorHere(position, `expected predicate to follow "("`) })
  (_ PAREN_CLOSE / &{ p.errorHere(position, `expected ")" to close "(" opened in predicate`) })
  /
  tagMatcher

tagMatcher <-
  tagName
  (
    (
      _ "="
      (literalString / &{ p.errorHere(position, `expected string literal to follow "="`) })
      { p.addLiteralMatcher() }
    )
    /
    (
      _ "!="
      (literalString / &{ p.errorHere(position, `expected string literal to follow "!="`) })
      { p.addLiteralMatcher() }
      { p.addNotPredicate() }
    )
    /
    (
      _ "match" KEY
      (literalString / &{ p.errorHere(position, `expected regex string literal to follow "match"`) })
      { p.addRegexMatcher() }
    )
    /
    (
      _ "in" KEY
      (literalList / &{ p.errorHere(position, `expected string literal list to follow "in" keyword`) })
      { p.addListMatcher() }
    )
    /
    &{ p.errorHere(position, `expected "=", "!=", "match", or "in" to follow tag key in predicate`) }
  )

literalString <-
  _ STRING
  { p.pushString(unescapeLiteral(text)) }

literalList <-
  { p.addLiteralList() }
  _ PAREN_OPEN
  (literalListString / &{ p.errorHere(position, `expected string literal to follow "(" in literal list`) })
  (
    _ COMMA
    (literalListString / &{ p.errorHere(position, `expected string literal to follow "," in literal list`) })
  )*
  (_ PAREN_CLOSE / &{ p.errorHere(position, `expected ")" to close "(" for literal list`) })

literalListString <-
  _ STRING
  { p.appendLiteral(unescapeLiteral(text)) }

tagName <-
  _ <TAG_NAME>
  { p.addTagLiteral(unescapeLiteral(text)) }

# Lexical Syntax
# ==============
# Convention: These rules contain no code blocks.

COLUMN_NAME <- IDENTIFIER
METRIC_NAME <- IDENTIFIER
TAG_NAME <-    IDENTIFIER
# TODO - may be refactored later.
IDENTIFIER <-
  "`" CHAR* ("`" / &{ p.errorHere(position, "expected \"`\" to end identifier") })
  /
  !(KEYWORD KEY)
  ID_SEGMENT
  (
    "."
    (ID_SEGMENT / &{ p.errorHere(position, `expected identifier segment to follow "."`) })
  )*
# `[[a-z]]?` allows for relative timestamps
TIMESTAMP <- _ <NUMBER [[a-z]]*> / _ STRING / _ <"now"> KEY
ID_SEGMENT <- ID_START ID_CONT*
# Hyphen (-) is intentionally omitted, since it makes the language ambiguous.
# If hyphens are needed, use backticks instead.
ID_START <-    [a-zA-Z_]
ID_CONT <-     ID_START / [0-9]

PROPERTY_KEY <-
  (
    <"from"> KEY
  /
    <"to"> KEY
  /
    <"resolution"> KEY
  /
    <"sample"> KEY
    (_ "by" KEY / &{ p.errorHere(position, `expected keyword "by" to follow keyword "sample"`) })
  )

PROPERTY_VALUE <- TIMESTAMP

KEYWORD <-     # List of keywords used throughout the code.
  "all" /
  "and" /
  "as" /
  "by" /
  "describe" /
  "group" /
  "collapse" /
  "in" /
  "match" /
  "not" /
  "or" /
  "select" /
  "where" /
  "metrics" /
  "from" /
  "to" /
  "resolution" /
  "sample"

# Operators
# =========

OP_PIPE <- "|"
OP_ADD  <- "+"
OP_SUB  <- "-"
OP_MULT <- "*"
OP_DIV  <- "/"
OP_AND  <- "and" KEY
OP_OR   <- "or" KEY
OP_NOT  <- "not" KEY


QUOTE_SINGLE <- "'"
QUOTE_DOUBLE <- '"'
STRING       <-
  QUOTE_SINGLE <(!QUOTE_SINGLE CHAR)*> (QUOTE_SINGLE / &{ p.errorHere(position, `expected "'" to close string`) })
  /
  QUOTE_DOUBLE <(!QUOTE_DOUBLE CHAR)*> (QUOTE_DOUBLE / &{ p.errorHere(position, `expected '"' to close string`) })
CHAR         <- "\\" (ESCAPE_CLASS / QUOTE_SINGLE / (QUOTE_DOUBLE / &{ p.errorHere(position, "expected \"\\\", \"'\", \"`\", or '\"' to follow \"\\\" in string literal") }) ) / ! ESCAPE_CLASS .
ESCAPE_CLASS <- "`" / "\\"

# Numerical elements
# ==================

# Definition for floating point numbers.
# modelled after JSON (http://json.org/)
NUMBER          <- NUMBER_INTEGER NUMBER_FRACTION? NUMBER_EXP?
NUMBER_NATURAL  <- "0" / [1-9] [0-9]*
NUMBER_FRACTION <- "." [0-9]+
NUMBER_INTEGER  <- "-"? NUMBER_NATURAL
NUMBER_EXP      <- "e" ("+" / "-")? ([0-9]+ / &{ p.errorHere(position, `expected exponent`) })

DURATION <- NUMBER [a-z]+ KEY

# Syntactic elements
# ==================

PAREN_OPEN <-  "("
PAREN_CLOSE <- ")"
COMMA <-       ","
_  <-          (SPACE / COMMENT_TRAIL / COMMENT_BLOCK)* # Optional spaces
COMMENT_TRAIL  <- "--" (!"\n" .)*
COMMENT_BLOCK  <- "/*" (!"*/" .)* "*/"
KEY <-         !ID_CONT
SPACE <-       " " / "\n" / "\t"
