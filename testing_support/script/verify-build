#!/bin/bash

# a flag used to tell if the build failed
fails=""

# Invoke gofmt on the current directory.
# -l flag causes it to only list files
GOFMT_RESULTS=`gofmt -l .`
if [ "$GOFMT_RESULTS" ]; then
	echo "FAIL: UNFORMATTED FILES:"
	echo "GOFMT FINDS"
	echo "$GOFMT_RESULTS"
	fails="fails"
fi

# Make sure every file has the same license
LICENSE_RESULTS=`./testing_support/script/check-license`
if [ $? -ne 0 ]; then
	echo "Not all files have the same license file: "
	echo "$LICENSE_RESULTS"
	fails="fails"
fi

# Lastly, make sure calling ./query/parser/build.sh doesn't cause ./query/language.peg.go to change

before=$(cat ./query/parser/language.peg.go)
./query/parser/build.sh
if [ $? -ne 0 ]; then
	echo "Not able to rebuild the parser"
	fails="fails"
fi
# we have to reformat in case peg.go produces unformatted code
gofmt -w ./query/parser/language.peg.go
if [ $? -ne 0 ]; then
	echo "Unable to run gofmt on query/parser/language.peg.go"
	fails="fails"
fi
goimports -w query/parser/language.peg.go
if [ $? -ne 0 ]; then
	echo "Unable to run goimports on query/parser/language.peg.go"
	fails="fails"
fi
after=$(cat ./query/parser/language.peg.go)

if [ "$before" != "$after" ]; then
	echo "FAIL: LANGUAGE .GO FILE IS NOT UP TO DATE"
	echo "THERE WERE CHANGES TO query/parser/language.peg AND NO CHANGES TO query/parser/language.peg.go"
	echo "Make sure you ran the build file, and that your version of peg is up to date."
	echo "To get the latest version of peg, run:"
	echo "> go get -u github.com/pointlander/peg"
	fails="fails"
fi

if [ $fails ]
then
	exit -1
fi
