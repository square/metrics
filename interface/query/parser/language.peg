# Copyright 2015 - 2016 Square Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package parser

import "github.com/square/metrics/interface/query/command"

type Parser Peg {
  // temporary variables
  // ===================

  // stack of nodes used during the AST traversal.
  // a non-empty stack at the finish implies a programming error.
  nodeStack  []any

  // user errors accumulated during the AST traversal.
  // a non-empty list at the finish time means an invalid query is provided.
  errors     []SyntaxError

  // programming errors accumulated during the AST traversal.
  // a non-empty list at the finish time implies a programming error.

  // final result
  command    command.Command
}

# The following queries are support

# describe all [match x]  <- describe all statement - returns all metric keys.
# describe metric where ... <- describes a single metric - returns all tagsets within a single metric key.
# select ...                <- select statement - retrieves, transforms, and aggregates time serieses.

# Refer to the unit test query_test.go for more info.

# Hierarchical Syntax
# ===================

root <- (selectStmt / describeStmt) _ !.

selectStmt <- _ ("select" KEY)?
  expressionList
  optionalPredicateClause
  propertyClause {
    p.makeSelect()
  }

describeStmt <- _ "describe" KEY (describeAllStmt / describeMetrics / describeSingleStmt)

describeAllStmt <- _ "all" KEY optionalMatchClause { p.makeDescribeAll() }

optionalMatchClause <- matchClause / { p.addNullMatchClause() }

matchClause <- _ "match" KEY literalString { p.addMatchClause() }

describeMetrics <- _ "metrics" KEY _ "where" KEY tagName _ "=" literalString { p.makeDescribeMetrics() }

describeSingleStmt <-
  _ <METRIC_NAME> { p.pushNode(unescapeLiteral(buffer[begin:end])) }
  optionalPredicateClause
  { p.makeDescribe() }

propertyClause <-
  { p.addEvaluationContext() }
  ( _ PROPERTY_KEY   { p.addPropertyKey(buffer[begin:end])   }
    _ PROPERTY_VALUE { p.addPropertyValue(buffer[begin:end]) }
    { p.insertPropertyKeyValue() }
  )*
  { p.checkPropertyClause() }

optionalPredicateClause <-
  predicateClause / { p.addNullPredicate() }

# expression_X are layered to maintain the order of operations.

expressionList <-
  { p.addExpressionList() }
  expression_start{ p.appendExpression() }
  (
    _ COMMA expression_start { p.appendExpression() }
  )*

expression_start <-
  expression_sum add_pipe

expression_sum <-
  expression_product
  (
    add_pipe
    ( _ OP_ADD { p.addOperatorLiteral("+") } / _ OP_SUB { p.addOperatorLiteral("-") })
    expression_product { p.addOperatorFunction() }
  ) *

expression_product <-
  expression_atom
  (
    add_pipe
    ( _ OP_DIV { p.addOperatorLiteral("/") } / _ OP_MULT { p.addOperatorLiteral("*") })
    expression_atom { p.addOperatorFunction() }
  ) *

add_one_pipe <-
  _ OP_PIPE
  _ <IDENTIFIER>
  { p.pushNode(unescapeLiteral(buffer[begin:end])) }
  (
    (
    _ PAREN_OPEN
      (expressionList / {p.addExpressionList()}) # argument list
      optionalGroupBy
    _ PAREN_CLOSE
    ) / {
      p.addExpressionList()
      p.addGroupBy()
    }
  )
  { p.addPipeExpression() }
  expression_annotation

add_pipe <- (add_one_pipe) *

expression_atom <- expression_atom_raw expression_annotation

expression_atom_raw <-
  expression_function /
  expression_metric /
  # #sub-expression
  _ PAREN_OPEN expression_start _ PAREN_CLOSE /
  # constant scalar
  _ <DURATION> { p.addDurationNode(text) } /
  _ <NUMBER> { p.addNumberNode(buffer[begin:end]) } /
  _ STRING { p.addStringNode(unescapeLiteral(buffer[begin:end])) }

expression_annotation_required <-
  _ "{"
  <[^}]*>
  "}"
  { p.addAnnotationExpression(buffer[begin:end]) }

expression_annotation <- expression_annotation_required?

optionalGroupBy <- { p.addGroupBy() } (groupByClause / collapseByClause)?

expression_function  <-
  # We allow syntax of the form:
  # func(expr_a, expr_b, expr_c group by column_a, column_b, column_c)
  # a single optional group-by clause.
  _ <IDENTIFIER> {
    p.pushNode(unescapeLiteral(buffer[begin:end]))
  }
  _ PAREN_OPEN
    expressionList optionalGroupBy
  _ PAREN_CLOSE {
    p.addFunctionInvocation()
  }

expression_metric <-
  _ <IDENTIFIER> {
    p.pushNode(unescapeLiteral(buffer[begin:end]))
  }
  (_ "[" predicate_1 _ "]" / { p.addNullPredicate() })? {
    p.addMetricExpression()
  }

groupByClause <-
  _ "group" KEY _ "by" KEY _ <COLUMN_NAME> {
    p.appendGroupBy(unescapeLiteral(buffer[begin:end]))
  }
  (
    _ COMMA _ <COLUMN_NAME> {
      p.appendGroupBy(unescapeLiteral(buffer[begin:end]))
    }
  )*

collapseByClause <-
  _ "collapse" KEY _ "by" KEY _ <COLUMN_NAME> {
    p.appendCollapseBy(unescapeLiteral(text))
  }
  (
  _ COMMA _ <COLUMN_NAME> {p.appendCollapseBy(unescapeLiteral(text))}
  )*

predicateClause <- _ "where" KEY _ predicate_1

# predicate_X are layered to maintain the order of operations.
# not
# or
# and
# ...

predicate_1 <-
  predicate_2 _ OP_OR predicate_1 { p.addOrPredicate() } /
  predicate_2

predicate_2 <-
  predicate_3 _ OP_AND predicate_2 { p.addAndPredicate() } /
  predicate_3

predicate_3 <-
  _ OP_NOT predicate_3 { p.addNotPredicate() } /
  _ PAREN_OPEN predicate_1 _ PAREN_CLOSE /
  tagMatcher

tagMatcher <-
  tagName _ "=" literalString {
    p.addLiteralMatcher()
  } /
  tagName _ "!=" literalString {
    p.addLiteralMatcher()
    p.addNotPredicate()
  } /
  tagName _ "match" KEY literalString {
    p.addRegexMatcher()
  } /
  tagName _ "in" KEY literalList {
    p.addListMatcher()
  }

literalString <- _ STRING {
  p.pushNode(unescapeLiteral(buffer[begin:end]))
}

literalList <- { p.addLiteralList() }
  _ PAREN_OPEN
    literalListString (_ COMMA literalListString)*
  _ PAREN_CLOSE

literalListString <- _ STRING {
  p.appendLiteral(unescapeLiteral(buffer[begin:end]))
}

tagName <-
  _ <TAG_NAME> { p.addTagLiteral(unescapeLiteral(buffer[begin:end])) }

# Lexical Syntax
# ==============
# Convention: These rules contain no code blocks.

COLUMN_NAME <- IDENTIFIER
METRIC_NAME <- IDENTIFIER
TAG_NAME <-    IDENTIFIER
# TODO - may be refactored later.
IDENTIFIER <-  "`" CHAR* "`" / _ !(KEYWORD KEY) ID_SEGMENT ("." ID_SEGMENT)*
# `[[a-z]]?` allows for relative timestamps
TIMESTAMP <- _ <NUMBER [[a-z]]*> / _ STRING / _ <"now">
ID_SEGMENT <- _ ID_START ID_CONT*
# Hyphen (-) is intentionally omitted, since it makes the language ambiguous.
# If hyphens are needed, use backticks instead.
ID_START <-    [a-zA-Z_]
ID_CONT <-     ID_START / [0-9]

PROPERTY_KEY <-
  (<"from"> /
  <"to"> /
  <"resolution"> /
  <"sample"> KEY _ "by") KEY

PROPERTY_VALUE <- TIMESTAMP

KEYWORD <-     # List of keywrods used throughout the code.
  "all" /
  "and" /
  "as" /
  "by" /
  "describe" /
  "group" /
  "collapse" /
  "in" /
  "match" /
  "not" /
  "or" /
  "select" /
  "where" /
  "metrics" /
  PROPERTY_KEY

# Operators
# =========

OP_PIPE <- "|"
OP_ADD  <- "+"
OP_SUB  <- "-"
OP_MULT <- "*"
OP_DIV  <- "/"
OP_AND  <- "and" KEY
OP_OR   <- "or" KEY
OP_NOT  <- "not" KEY


QUOTE_SINGLE <- "'"
QUOTE_DOUBLE <- '"'
STRING       <- QUOTE_SINGLE <(!QUOTE_SINGLE CHAR)*> QUOTE_SINGLE / QUOTE_DOUBLE <(!QUOTE_DOUBLE CHAR)*> QUOTE_DOUBLE
CHAR         <- "\\" (ESCAPE_CLASS / QUOTE_SINGLE / QUOTE_DOUBLE) / ! ESCAPE_CLASS .
ESCAPE_CLASS <- "`" / "\\"

# Numerical elements
# ==================

# Definition for floating point numbers.
# modelled after JSON (http://json.org/)
NUMBER          <- NUMBER_INTEGER NUMBER_FRACTION? NUMBER_EXP?
NUMBER_NATURAL  <- "0" / [1-9] [0-9]*
NUMBER_FRACTION <- "." [0-9]+
NUMBER_INTEGER  <- "-"? NUMBER_NATURAL
NUMBER_EXP      <- "e" ("+" / "-")? [0-9]+

DURATION <- NUMBER [a-z]+ KEY

# Syntactic elements
# ==================

PAREN_OPEN <-  "("
PAREN_CLOSE <- ")"
COMMA <-       ","
_  <-          (SPACE / COMMENT_TRAIL / COMMENT_BLOCK) * # Optional spaces
COMMENT_TRAIL  <- "--" (!"\n" .)*
COMMENT_BLOCK  <- "/*" (!"*/" .)* "*/"
KEY <-         !ID_CONT
SPACE <-       " " / "\n" / "\t"
